From 840b262b9a90513db527c4c818d137b98a1425fc Mon Sep 17 00:00:00 2001
From: AfalpHy <736353503@qq.com>
Date: Mon, 13 Jan 2025 15:47:08 +0800
Subject: [PATCH 1/3] implement context switch

---
 bsp/abstract-machine/src/context.c | 62 ++++++++++++++++++++++++------
 1 file changed, 51 insertions(+), 11 deletions(-)

diff --git a/bsp/abstract-machine/src/context.c b/bsp/abstract-machine/src/context.c
index ee38829ae..7b8c3ed27 100644
--- a/bsp/abstract-machine/src/context.c
+++ b/bsp/abstract-machine/src/context.c
@@ -2,30 +2,70 @@
 #include <klib.h>
 #include <rtthread.h>
 
-static Context* ev_handler(Event e, Context *c) {
+static Context **_from = NULL;
+static Context **_to = NULL;
+
+static Context *ev_handler(Event e, Context *c) {
   switch (e.event) {
-    default: printf("Unhandled event ID = %d\n", e.event); assert(0);
+  case EVENT_YIELD: {
+    if (_from) {
+      *_from = c;
+    }
+    c = *_to;
+    break;
+  }
+  case EVENT_IRQ_TIMER:
+    break;
+  default:
+    printf("Unhandled event ID = %d\n", e.event);
+    assert(0);
   }
   return c;
 }
 
-void __am_cte_init() {
-  cte_init(ev_handler);
-}
+void __am_cte_init() { cte_init(ev_handler); }
 
 void rt_hw_context_switch_to(rt_ubase_t to) {
-  assert(0);
+  _from = NULL;
+  _to = (Context **)to;
+  yield();
 }
 
 void rt_hw_context_switch(rt_ubase_t from, rt_ubase_t to) {
-  assert(0);
+  _from = (Context **)from;
+  _to = (Context **)to;
+  yield();
 }
 
-void rt_hw_context_switch_interrupt(void *context, rt_ubase_t from, rt_ubase_t to, struct rt_thread *to_thread) {
+void rt_hw_context_switch_interrupt(void *context, rt_ubase_t from,
+                                    rt_ubase_t to,
+                                    struct rt_thread *to_thread) {
   assert(0);
 }
 
-rt_uint8_t *rt_hw_stack_init(void *tentry, void *parameter, rt_uint8_t *stack_addr, void *texit) {
-  assert(0);
-  return NULL;
+typedef struct {
+  void (*tentry)(void *);
+  void *parameter;
+  void (*texit)();
+} para_wrapper;
+
+static void fun_wrapper(para_wrapper *para) {
+  para->tentry(para->parameter);
+  para->texit();
+}
+
+rt_uint8_t *rt_hw_stack_init(void *tentry, void *parameter,
+                             rt_uint8_t *stack_addr, void *texit) {
+  Area kstack;
+  // align
+  kstack.end =
+      (void *)((uintptr_t)stack_addr / sizeof(uintptr_t) * sizeof(uintptr_t));
+  para_wrapper *para = rt_malloc(sizeof(para_wrapper));
+  para->tentry = tentry;
+  para->parameter = parameter;
+  para->texit = texit;
+
+  rt_uint8_t *tmp = (rt_uint8_t *)kcontext(kstack, (void *)fun_wrapper, para);
+
+  return tmp;
 }
-- 
2.34.1

