From 4fd2e9ed42048653008988b26e24118f0b77758a Mon Sep 17 00:00:00 2001
From: AfalpHy <736353503@qq.com>
Date: Tue, 18 Feb 2025 16:30:21 +0800
Subject: [PATCH 21/29] complete vga

---
 perip/vga/vga_top_apb.v | 83 +++++++++++++++++++++++++++++++----------
 1 file changed, 63 insertions(+), 20 deletions(-)

diff --git a/perip/vga/vga_top_apb.v b/perip/vga/vga_top_apb.v
index 5c74cfbe..3945a19c 100644
--- a/perip/vga/vga_top_apb.v
+++ b/perip/vga/vga_top_apb.v
@@ -1,23 +1,66 @@
-module vga_top_apb(
-  input         clock,
-  input         reset,
-  input  [31:0] in_paddr,
-  input         in_psel,
-  input         in_penable,
-  input  [2:0]  in_pprot,
-  input         in_pwrite,
-  input  [31:0] in_pwdata,
-  input  [3:0]  in_pstrb,
-  output        in_pready,
-  output [31:0] in_prdata,
-  output        in_pslverr,
-
-  output [7:0]  vga_r,
-  output [7:0]  vga_g,
-  output [7:0]  vga_b,
-  output        vga_hsync,
-  output        vga_vsync,
-  output        vga_valid
+module vga_top_apb (
+    input         clock,
+    input         reset,
+    input  [31:0] in_paddr,
+    input         in_psel,
+    input         in_penable,
+    input  [ 2:0] in_pprot,
+    input         in_pwrite,
+    input  [31:0] in_pwdata,
+    input  [ 3:0] in_pstrb,
+    output        in_pready,
+    output [31:0] in_prdata,
+    output        in_pslverr,
+
+    output [7:0] vga_r,
+    output [7:0] vga_g,
+    output [7:0] vga_b,
+    output       vga_hsync,
+    output       vga_vsync,
+    output       vga_valid
 );
 
+  assign in_pready = in_psel & in_penable;
+
+  reg [7:0] buffer[0:'h200000-1];
+
+  reg [20:0] addr;
+
+  reg state;
+
+  assign vga_r = buffer[addr+2];
+  assign vga_g = buffer[addr+1];
+  assign vga_b = buffer[addr];
+
+  assign vga_valid = state;
+
+  always @(posedge clock) begin
+    if (reset) begin
+      addr  <= 0;
+      state <= 0;
+    end else begin
+      if (in_psel & ~in_penable) begin
+        if (in_pwrite) begin
+          if (in_paddr[20:0] == 'h1ffffc) begin
+            if (in_pwdata == 'h1 && state == 0) begin
+              state <= 1;
+              addr  <= 0;
+            end
+          end else begin
+            if (in_pstrb[0]) buffer[in_paddr[20:0]] <= in_pwdata[7:0];
+            if (in_pstrb[1]) buffer[in_paddr[20:0]+1] <= in_pwdata[15:8];
+            if (in_pstrb[2]) buffer[in_paddr[20:0]+2] <= in_pwdata[23:16];
+            if (in_pstrb[3]) buffer[in_paddr[20:0]+3] <= in_pwdata[31:24];
+          end
+        end
+      end
+      if (state) begin
+        if (addr + 4 == 640 * 480 * 4) begin
+          state <= 0;
+          addr  <= 0;
+        end else addr <= addr + 4;
+      end
+    end
+  end
+
 endmodule
-- 
2.34.1

