From 1c4ab8cfac0a5d6ee500752d6c2748fa5e0eab91 Mon Sep 17 00:00:00 2001
From: AfalpHy <736353503@qq.com>
Date: Mon, 10 Feb 2025 17:51:54 +0800
Subject: [PATCH 01/29] add bitrev spi_xip psram

---
 Makefile                    |   2 +-
 mill                        | 241 ++++++++++++++++++++++++++++++++++++
 perip/bitrev/bitrev.v       |  35 +++++-
 perip/psram/psram.v         |  98 ++++++++++++++-
 perip/spi/rtl/spi_top_apb.v | 210 +++++++++++++++++++++++--------
 5 files changed, 520 insertions(+), 66 deletions(-)
 create mode 100755 mill

diff --git a/Makefile b/Makefile
index 6d76a223..e29dab72 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@ V_FILE_FINAL = build/ysyxSoCFull.v
 SCALA_FILES = $(shell find src/ -name "*.scala")
 
 $(V_FILE_FINAL): $(SCALA_FILES)
-	mill -i ysyxsoc.runMain ysyx.Elaborate --target-dir $(@D)
+	./mill -i ysyxsoc.runMain ysyx.Elaborate --target-dir $(@D)
 	mv $(V_FILE_GEN) $@
 	sed -i -e 's/_\(aw\|ar\|w\|r\|b\)_\(\|bits_\)/_\1/g' $@
 	sed -i '/firrtl_black_box_resource_files.f/, $$d' $@
diff --git a/mill b/mill
new file mode 100755
index 00000000..8eda811d
--- /dev/null
+++ b/mill
@@ -0,0 +1,241 @@
+#!/usr/bin/env sh
+
+# This is a wrapper script, that automatically download mill from GitHub release pages
+# You can give the required mill version with --mill-version parameter
+# If no version is given, it falls back to the value of DEFAULT_MILL_VERSION
+#
+# Original Project page: https://github.com/lefou/millw
+# Script Version: 0.4.12
+#
+# If you want to improve this script, please also contribute your changes back!
+#
+# Licensed under the Apache License, Version 2.0
+
+set -e
+
+if [ -z "${DEFAULT_MILL_VERSION}" ] ; then
+  DEFAULT_MILL_VERSION=0.12.5
+fi
+
+
+if [ -z "${GITHUB_RELEASE_CDN}" ] ; then
+  GITHUB_RELEASE_CDN=""
+fi
+
+
+MILL_REPO_URL="https://github.com/com-lihaoyi/mill"
+
+if [ -z "${CURL_CMD}" ] ; then
+  CURL_CMD=curl
+fi
+
+# Explicit commandline argument takes precedence over all other methods
+if [ "$1" = "--mill-version" ] ; then
+  shift
+  if [ "x$1" != "x" ] ; then
+    MILL_VERSION="$1"
+    shift
+  else
+    echo "You specified --mill-version without a version." 1>&2
+    echo "Please provide a version that matches one provided on" 1>&2
+    echo "${MILL_REPO_URL}/releases" 1>&2
+    false
+  fi
+fi
+
+# Please note, that if a MILL_VERSION is already set in the environment,
+# We reuse it's value and skip searching for a value.
+
+# If not already set, read .mill-version file
+if [ -z "${MILL_VERSION}" ] ; then
+  if [ -f ".mill-version" ] ; then
+    MILL_VERSION="$(tr '\r' '\n' < .mill-version | head -n 1 2> /dev/null)"
+  elif [ -f ".config/mill-version" ] ; then
+    MILL_VERSION="$(tr '\r' '\n' < .config/mill-version | head -n 1 2> /dev/null)"
+  fi
+fi
+
+MILL_USER_CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/mill"
+
+if [ -z "${MILL_DOWNLOAD_PATH}" ] ; then
+  MILL_DOWNLOAD_PATH="${MILL_USER_CACHE_DIR}/download"
+fi
+
+# If not already set, try to fetch newest from Github
+if [ -z "${MILL_VERSION}" ] ; then
+  # TODO: try to load latest version from release page
+  echo "No mill version specified." 1>&2
+  echo "You should provide a version via '.mill-version' file or --mill-version option." 1>&2
+
+  mkdir -p "${MILL_DOWNLOAD_PATH}"
+  LANG=C touch -d '1 hour ago' "${MILL_DOWNLOAD_PATH}/.expire_latest" 2>/dev/null || (
+    # we might be on OSX or BSD which don't have -d option for touch
+    # but probably a -A [-][[hh]mm]SS
+    touch "${MILL_DOWNLOAD_PATH}/.expire_latest"; touch -A -010000 "${MILL_DOWNLOAD_PATH}/.expire_latest"
+  ) || (
+    # in case we still failed, we retry the first touch command with the intention
+    # to show the (previously suppressed) error message
+    LANG=C touch -d '1 hour ago' "${MILL_DOWNLOAD_PATH}/.expire_latest"
+  )
+
+  # POSIX shell variant of bash's -nt operator, see https://unix.stackexchange.com/a/449744/6993
+  # if [ "${MILL_DOWNLOAD_PATH}/.latest" -nt "${MILL_DOWNLOAD_PATH}/.expire_latest" ] ; then
+  if [ -n "$(find -L "${MILL_DOWNLOAD_PATH}/.latest" -prune -newer "${MILL_DOWNLOAD_PATH}/.expire_latest")" ]; then
+    # we know a current latest version
+    MILL_VERSION=$(head -n 1 "${MILL_DOWNLOAD_PATH}"/.latest 2> /dev/null)
+  fi
+
+  if [ -z "${MILL_VERSION}" ] ; then
+    # we don't know a current latest version
+    echo "Retrieving latest mill version ..." 1>&2
+    LANG=C ${CURL_CMD} -s -i -f -I ${MILL_REPO_URL}/releases/latest 2> /dev/null  | grep --ignore-case Location: | sed s'/^.*tag\///' | tr -d '\r\n' > "${MILL_DOWNLOAD_PATH}/.latest"
+    MILL_VERSION=$(head -n 1 "${MILL_DOWNLOAD_PATH}"/.latest 2> /dev/null)
+  fi
+
+  if [ -z "${MILL_VERSION}" ] ; then
+    # Last resort
+    MILL_VERSION="${DEFAULT_MILL_VERSION}"
+    echo "Falling back to hardcoded mill version ${MILL_VERSION}" 1>&2
+  else
+    echo "Using mill version ${MILL_VERSION}" 1>&2
+  fi
+fi
+
+MILL="${MILL_DOWNLOAD_PATH}/${MILL_VERSION}"
+
+try_to_use_system_mill() {
+  if [ "$(uname)" != "Linux" ]; then
+    return 0
+  fi
+
+  MILL_IN_PATH="$(command -v mill || true)"
+
+  if [ -z "${MILL_IN_PATH}" ]; then
+    return 0
+  fi
+
+  SYSTEM_MILL_FIRST_TWO_BYTES=$(head --bytes=2 "${MILL_IN_PATH}")
+  if [ "${SYSTEM_MILL_FIRST_TWO_BYTES}" = "#!" ]; then
+	  # MILL_IN_PATH is (very likely) a shell script and not the mill
+	  # executable, ignore it.
+	  return 0
+  fi
+
+  SYSTEM_MILL_PATH=$(readlink -e "${MILL_IN_PATH}")
+  SYSTEM_MILL_SIZE=$(stat --format=%s "${SYSTEM_MILL_PATH}")
+  SYSTEM_MILL_MTIME=$(stat --format=%y "${SYSTEM_MILL_PATH}")
+
+  if [ ! -d "${MILL_USER_CACHE_DIR}" ]; then
+    mkdir -p "${MILL_USER_CACHE_DIR}"
+  fi
+
+  SYSTEM_MILL_INFO_FILE="${MILL_USER_CACHE_DIR}/system-mill-info"
+  if [ -f "${SYSTEM_MILL_INFO_FILE}" ]; then
+    parseSystemMillInfo() {
+        LINE_NUMBER="${1}"
+        # Select the line number of the SYSTEM_MILL_INFO_FILE, cut the
+        # variable definition in that line in two halves and return
+        # the value, and finally remove the quotes.
+        sed -n "${LINE_NUMBER}p" "${SYSTEM_MILL_INFO_FILE}" |\
+            cut -d= -f2 |\
+            sed 's/"\(.*\)"/\1/'
+    }
+
+    CACHED_SYSTEM_MILL_PATH=$(parseSystemMillInfo 1)
+    CACHED_SYSTEM_MILL_VERSION=$(parseSystemMillInfo 2)
+    CACHED_SYSTEM_MILL_SIZE=$(parseSystemMillInfo 3)
+    CACHED_SYSTEM_MILL_MTIME=$(parseSystemMillInfo 4)
+
+    if [ "${SYSTEM_MILL_PATH}" = "${CACHED_SYSTEM_MILL_PATH}" ] \
+           && [ "${SYSTEM_MILL_SIZE}" = "${CACHED_SYSTEM_MILL_SIZE}" ] \
+           && [ "${SYSTEM_MILL_MTIME}" = "${CACHED_SYSTEM_MILL_MTIME}" ]; then
+      if [ "${CACHED_SYSTEM_MILL_VERSION}" = "${MILL_VERSION}" ]; then
+          MILL="${SYSTEM_MILL_PATH}"
+          return 0
+      else
+          return 0
+      fi
+    fi
+  fi
+
+  SYSTEM_MILL_VERSION=$(${SYSTEM_MILL_PATH} --version | head -n1 | sed -n 's/^Mill.*version \(.*\)/\1/p')
+
+  cat <<EOF > "${SYSTEM_MILL_INFO_FILE}"
+CACHED_SYSTEM_MILL_PATH="${SYSTEM_MILL_PATH}"
+CACHED_SYSTEM_MILL_VERSION="${SYSTEM_MILL_VERSION}"
+CACHED_SYSTEM_MILL_SIZE="${SYSTEM_MILL_SIZE}"
+CACHED_SYSTEM_MILL_MTIME="${SYSTEM_MILL_MTIME}"
+EOF
+
+  if [ "${SYSTEM_MILL_VERSION}" = "${MILL_VERSION}" ]; then
+    MILL="${SYSTEM_MILL_PATH}"
+  fi
+}
+try_to_use_system_mill
+
+# If not already downloaded, download it
+if [ ! -s "${MILL}" ] ; then
+
+  # support old non-XDG download dir
+  MILL_OLD_DOWNLOAD_PATH="${HOME}/.mill/download"
+  OLD_MILL="${MILL_OLD_DOWNLOAD_PATH}/${MILL_VERSION}"
+  if [ -x "${OLD_MILL}" ] ; then
+    MILL="${OLD_MILL}"
+  else
+    case $MILL_VERSION in
+      0.0.* | 0.1.* | 0.2.* | 0.3.* | 0.4.* )
+        DOWNLOAD_SUFFIX=""
+        DOWNLOAD_FROM_MAVEN=0
+        ;;
+      0.5.* | 0.6.* | 0.7.* | 0.8.* | 0.9.* | 0.10.* | 0.11.0-M* )
+        DOWNLOAD_SUFFIX="-assembly"
+        DOWNLOAD_FROM_MAVEN=0
+        ;;
+      *)
+        DOWNLOAD_SUFFIX="-assembly"
+        DOWNLOAD_FROM_MAVEN=1
+        ;;
+    esac
+
+    DOWNLOAD_FILE=$(mktemp mill.XXXXXX)
+
+    if [ "$DOWNLOAD_FROM_MAVEN" = "1" ] ; then
+      DOWNLOAD_URL="https://repo1.maven.org/maven2/com/lihaoyi/mill-dist/${MILL_VERSION}/mill-dist-${MILL_VERSION}.jar"
+    else
+      MILL_VERSION_TAG=$(echo "$MILL_VERSION" | sed -E 's/([^-]+)(-M[0-9]+)?(-.*)?/\1\2/')
+      DOWNLOAD_URL="${GITHUB_RELEASE_CDN}${MILL_REPO_URL}/releases/download/${MILL_VERSION_TAG}/${MILL_VERSION}${DOWNLOAD_SUFFIX}"
+      unset MILL_VERSION_TAG
+    fi
+
+    # TODO: handle command not found
+    echo "Downloading mill ${MILL_VERSION} from ${DOWNLOAD_URL} ..." 1>&2
+    ${CURL_CMD} -f -L -o "${DOWNLOAD_FILE}" "${DOWNLOAD_URL}"
+    chmod +x "${DOWNLOAD_FILE}"
+    mkdir -p "${MILL_DOWNLOAD_PATH}"
+    mv "${DOWNLOAD_FILE}" "${MILL}"
+
+    unset DOWNLOAD_FILE
+    unset DOWNLOAD_SUFFIX
+  fi
+fi
+
+if [ -z "$MILL_MAIN_CLI" ] ; then
+  MILL_MAIN_CLI="${0}"
+fi
+
+MILL_FIRST_ARG=""
+if [ "$1" = "--bsp" ] || [ "$1" = "-i" ] || [ "$1" = "--interactive" ] || [ "$1" = "--no-server" ] || [ "$1" = "--repl" ] || [ "$1" = "--help" ] ; then
+  # Need to preserve the first position of those listed options
+  MILL_FIRST_ARG=$1
+  shift
+fi
+
+unset MILL_DOWNLOAD_PATH
+unset MILL_OLD_DOWNLOAD_PATH
+unset OLD_MILL
+unset MILL_VERSION
+unset MILL_REPO_URL
+
+# We don't quote MILL_FIRST_ARG on purpose, so we can expand the empty value without quotes
+# shellcheck disable=SC2086
+exec "${MILL}" $MILL_FIRST_ARG -D "mill.main.cli=${MILL_MAIN_CLI}" "$@"
\ No newline at end of file
diff --git a/perip/bitrev/bitrev.v b/perip/bitrev/bitrev.v
index f1c3b363..020690c1 100644
--- a/perip/bitrev/bitrev.v
+++ b/perip/bitrev/bitrev.v
@@ -1,8 +1,33 @@
 module bitrev (
-  input  sck,
-  input  ss,
-  input  mosi,
-  output miso
+    input sck,
+    input ss,
+    input mosi,
+    output reg miso
 );
-  assign miso = 1'b1;
+  reg [3:0] cnt;
+  reg [7:0] data;
+  reg in;
+  reg busy;
+
+  assign miso = busy ? (in ? 0 : data[0]) : 1;
+
+  always @(posedge sck) begin
+    if (cnt == 8) begin
+      in  = ~in;
+      cnt = 0;
+    end
+    if (in) data <= {data[6:0], mosi};
+    else data <= data >> 1;
+    cnt = cnt + 1;
+  end
+
+  always @(posedge ss or negedge ss) begin
+    if (ss) busy <= 0;
+    else begin
+      busy <= 1;
+      cnt = 0;
+      in  = 1;
+    end
+  end
+
 endmodule
diff --git a/perip/psram/psram.v b/perip/psram/psram.v
index d9bdd882..4b63f7f2 100644
--- a/perip/psram/psram.v
+++ b/perip/psram/psram.v
@@ -1,9 +1,97 @@
-module psram(
-  input sck,
-  input ce_n,
-  inout [3:0] dio
+import "DPI-C" function void psram_read(
+  input  int addr,
+  output int data
 );
+import "DPI-C" function void psram_write(
+  input int addr,
+  input int data,
+  input int wstrb
+);
+
+module psram (
+    input sck,
+    input ce_n,
+    inout [3:0] dio
+);
+
+  parameter CMD = 0;
+  parameter ADDR = 1;
+  parameter DATA = 2;
+
+  reg [1:0] state;
+
+  reg [7:0] cnt;
+
+  reg [7:0] cmd;
+  reg [31:0] addr;
+  wire [31:0] rdata;
+  reg [31:0] data;
+
+  reg wen;
+
+  assign dio = (~wen & state == DATA) ? data[7:4] : 4'bz;
+
+  always @(state) begin
+    if (state == DATA && ~wen) psram_read(addr, rdata);
+  end
+
+  always @(posedge sck or posedge ce_n) begin
+    if (ce_n) cnt <= 8'b0;
+    else cnt <= cnt + 1;
+  end
+
+  always @(posedge sck or posedge ce_n) begin
+    if (ce_n) state <= CMD;
+    else begin
+      case (state)
+        CMD: state <= (cnt == 8'd7) ? ADDR : state;
+        ADDR: state <= (cnt == 8'd13) ? DATA : state;
+        default: state <= state;
+      endcase
+    end
+  end
+
+  always @(posedge sck) begin
+    if (cnt == 8'd8) begin
+      if (cmd == 8'hEB) wen <= 0;
+      else if (cmd == 8'h38) wen <= 1;
+      else begin
+        $fwrite(32'h80000002, "Assertion failed: Unsupport command `%xh`", cmd);
+        $fatal;
+      end
+    end
+  end
+
+  always @(posedge sck) begin
+    case (state)
+      CMD: cmd <= {cmd[6:0], dio[0]};
+      ADDR: addr <= {addr[27:0], dio};
+      DATA: begin
+        if (wen) data <= {data[27:0], dio};
+        else begin
+          if (cnt == 8'd14) begin
+            data <= rdata;
+          end else if (cnt >= 21) begin
+            if (cnt[0]) begin
+              data[7:4] <= data[3:0];
+            end else data <= data >> 8;
+          end
+        end
+      end
+      default: ;
+    endcase
+  end
 
-  assign dio = 4'bz;
+  always @(posedge ce_n) begin
+    if (wen) begin
+      if (cnt == 16) begin
+        psram_write(addr, {24'b0, data[7:0]}, 32'hff);
+      end else if (cnt == 18) begin
+        psram_write(addr, {16'b0, data[7:0], data[15:8]}, 32'hffff);
+      end else if (cnt == 22 && wen) begin
+        psram_write(addr, {data[7:0], data[15:8], data[23:16], data[31:24]}, 32'hffff_ffff);
+      end
+    end
+  end
 
 endmodule
diff --git a/perip/spi/rtl/spi_top_apb.v b/perip/spi/rtl/spi_top_apb.v
index 92d37516..02524d49 100644
--- a/perip/spi/rtl/spi_top_apb.v
+++ b/perip/spi/rtl/spi_top_apb.v
@@ -3,71 +3,171 @@
 //`define FAST_FLASH
 
 module spi_top_apb #(
-  parameter flash_addr_start = 32'h30000000,
-  parameter flash_addr_end   = 32'h3fffffff,
-  parameter spi_ss_num       = 8
+    parameter flash_addr_start = 32'h30000000,
+    parameter flash_addr_end   = 32'h3fffffff,
+    parameter spi_ss_num       = 8
 ) (
-  input         clock,
-  input         reset,
-  input  [31:0] in_paddr,
-  input         in_psel,
-  input         in_penable,
-  input  [2:0]  in_pprot,
-  input         in_pwrite,
-  input  [31:0] in_pwdata,
-  input  [3:0]  in_pstrb,
-  output        in_pready,
-  output [31:0] in_prdata,
-  output        in_pslverr,
+    input             clock,
+    input             reset,
+    input      [31:0] in_paddr,
+    input             in_psel,
+    input             in_penable,
+    input      [ 2:0] in_pprot,
+    input             in_pwrite,
+    input      [31:0] in_pwdata,
+    input      [ 3:0] in_pstrb,
+    output reg        in_pready,
+    output reg [31:0] in_prdata,
+    output            in_pslverr,
 
-  output                  spi_sck,
-  output [spi_ss_num-1:0] spi_ss,
-  output                  spi_mosi,
-  input                   spi_miso,
-  output                  spi_irq_out
+    output                  spi_sck,
+    output [spi_ss_num-1:0] spi_ss,
+    output                  spi_mosi,
+    input                   spi_miso,
+    output                  spi_irq_out
 );
 
 `ifdef FAST_FLASH
 
-wire [31:0] data;
-parameter invalid_cmd = 8'h0;
-flash_cmd flash_cmd_i(
-  .clock(clock),
-  .valid(in_psel && !in_penable),
-  .cmd(in_pwrite ? invalid_cmd : 8'h03),
-  .addr({8'b0, in_paddr[23:2], 2'b0}),
-  .data(data)
-);
-assign spi_sck    = 1'b0;
-assign spi_ss     = 8'b0;
-assign spi_mosi   = 1'b1;
-assign spi_irq_out= 1'b0;
-assign in_pslverr = 1'b0;
-assign in_pready  = in_penable && in_psel && !in_pwrite;
-assign in_prdata  = data[31:0];
+  wire [31:0] data;
+  parameter invalid_cmd = 8'h0;
+  flash_cmd flash_cmd_i (
+      .clock(clock),
+      .valid(in_psel && !in_penable),
+      .cmd  (in_pwrite ? invalid_cmd : 8'h03),
+      .addr ({8'b0, in_paddr[23:2], 2'b0}),
+      .data (data)
+  );
+  assign spi_sck     = 1'b0;
+  assign spi_ss      = 8'b0;
+  assign spi_mosi    = 1'b1;
+  assign spi_irq_out = 1'b0;
+  assign in_pslverr  = 1'b0;
+  assign in_pready   = in_penable && in_psel && !in_pwrite;
+  assign in_prdata   = data[31:0];
 
 `else
 
-spi_top u0_spi_top (
-  .wb_clk_i(clock),
-  .wb_rst_i(reset),
-  .wb_adr_i(in_paddr[4:0]),
-  .wb_dat_i(in_pwdata),
-  .wb_dat_o(in_prdata),
-  .wb_sel_i(in_pstrb),
-  .wb_we_i (in_pwrite),
-  .wb_stb_i(in_psel),
-  .wb_cyc_i(in_penable),
-  .wb_ack_o(in_pready),
-  .wb_err_o(in_pslverr),
-  .wb_int_o(spi_irq_out),
+  parameter NORMAL = 0;
+  parameter XIP = 1;
 
-  .ss_pad_o(spi_ss),
-  .sclk_pad_o(spi_sck),
-  .mosi_pad_o(spi_mosi),
-  .miso_pad_i(spi_miso)
-);
+  parameter XIP_CMD = 0;
+  parameter XIP_DIVIED = 1;
+  parameter XIP_SS = 2;
+  parameter XIP_CTRL = 3;
+  parameter XIP_CHECK = 4;
+  parameter XIP_READ = 5;
+
+  reg state;
+  reg [2:0] xip_state;
+
+  reg [4:0] wb_adr_i;
+  reg [31:0] wb_dat_i;
+  reg [3:0] wb_sel_i;
+  reg wb_we_i;
+  wire wb_ack_o;
+
+  always @(posedge clock or reset) begin
+    if (reset) begin
+      state <= NORMAL;
+      xip_state <= XIP_CMD;
+      wb_adr_i <= 0;
+      wb_we_i <= 0;
+    end else begin
+      if (state == NORMAL) begin
+        if (in_paddr[31:28] == 4'h3) begin
+          wb_adr_i  <= 4;
+          wb_dat_i  <= {8'h03, in_paddr[23:0]};
+          wb_sel_i  <= 4'b1111;
+          wb_we_i   <= 1;
+          in_pready <= 0;
+          if (in_penable) begin
+            state <= XIP;
+            xip_state <= XIP_CMD;
+          end
+        end else begin
+          if (wb_ack_o) begin
+            wb_we_i   <= 0;
+            in_pready <= 1;
+          end else begin
+            wb_adr_i  <= in_paddr[4:0];
+            wb_dat_i  <= in_pwdata;
+            wb_sel_i  <= in_pstrb;
+            wb_we_i   <= in_pwrite;
+            in_pready <= 0;
+          end
+        end
+      end else begin
+        if (xip_state == XIP_CMD) begin
+          if (wb_ack_o) begin
+            wb_adr_i  <= 20;
+            wb_dat_i  <= 0;
+            wb_sel_i  <= 1;
+            wb_we_i   <= 1;
+            xip_state <= XIP_DIVIED;
+          end
+        end else if (xip_state == XIP_DIVIED) begin
+          if (wb_ack_o) begin
+            wb_adr_i  <= 24;
+            wb_dat_i  <= 1;
+            wb_sel_i  <= 1;
+            wb_we_i   <= 1;
+            xip_state <= XIP_SS;
+          end
+        end else if (xip_state == XIP_SS) begin
+          if (wb_ack_o) begin
+            wb_adr_i  <= 16;
+            wb_dat_i  <= 32'h2140;
+            wb_sel_i  <= 4'b1111;
+            wb_we_i   <= 1;
+            xip_state <= XIP_CTRL;
+          end
+        end else if (xip_state == XIP_CTRL) begin
+          if (wb_ack_o) begin
+            wb_adr_i  <= 16;
+            wb_we_i   <= 0;
+            xip_state <= XIP_CHECK;
+          end
+        end else if (xip_state == XIP_CHECK) begin
+          if (wb_ack_o) begin
+            if ((in_prdata & 32'h100) == 0) begin
+              wb_adr_i  <= 0;
+              xip_state <= XIP_READ;
+            end
+          end
+        end else begin
+          if (wb_ack_o) in_pready <= 1;
+          else begin
+            // when in_penable is false, the inst have completed
+            if (~in_penable) begin
+              state <= NORMAL;
+            end
+          end
+        end
+      end
+    end
+  end
+
+  spi_top u0_spi_top (
+      .wb_clk_i(clock),
+      .wb_rst_i(reset),
+      .wb_adr_i(wb_adr_i),
+      .wb_dat_i(wb_dat_i),
+      .wb_dat_o(in_prdata),
+      .wb_sel_i(wb_sel_i),
+      .wb_we_i (wb_we_i),
+      .wb_stb_i(in_psel),
+      .wb_cyc_i(in_penable),
+      .wb_ack_o(wb_ack_o),
+      .wb_err_o(in_pslverr),
+      .wb_int_o(spi_irq_out),
+
+      .ss_pad_o  (spi_ss),
+      .sclk_pad_o(spi_sck),
+      .mosi_pad_o(spi_mosi),
+      .miso_pad_i(spi_miso)
+  );
 
-`endif // FAST_FLASH
+`endif  // FAST_FLASH
 
 endmodule
-- 
2.34.1

