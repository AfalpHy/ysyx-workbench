From 4de6161c6ad55f51a0b02920c0516c4f1324184f Mon Sep 17 00:00:00 2001
From: AfalpHy <736353503@qq.com>
Date: Tue, 6 May 2025 15:04:48 +0800
Subject: [PATCH 29/29] support different burst len for delayer

---
 perip/amba/axi4_delayer.v | 147 ++++++++++++++++++++------------------
 1 file changed, 76 insertions(+), 71 deletions(-)

diff --git a/perip/amba/axi4_delayer.v b/perip/amba/axi4_delayer.v
index 8fcc4a39..e2c9a5c5 100644
--- a/perip/amba/axi4_delayer.v
+++ b/perip/amba/axi4_delayer.v
@@ -2,35 +2,35 @@ module axi4_delayer (
     input clock,
     input reset,
 
-    output            in_arready,
-    input             in_arvalid,
-    input      [ 3:0] in_arid,
-    input      [31:0] in_araddr,
-    input      [ 7:0] in_arlen,
-    input      [ 2:0] in_arsize,
-    input      [ 1:0] in_arburst,
-    input             in_rready,
-    output            in_rvalid,
-    output     [ 3:0] in_rid,
-    output reg [31:0] in_rdata,
-    output     [ 1:0] in_rresp,
-    output            in_rlast,
-    output            in_awready,
-    input             in_awvalid,
-    input      [ 3:0] in_awid,
-    input      [31:0] in_awaddr,
-    input      [ 7:0] in_awlen,
-    input      [ 2:0] in_awsize,
-    input      [ 1:0] in_awburst,
-    output            in_wready,
-    input             in_wvalid,
-    input      [31:0] in_wdata,
-    input      [ 3:0] in_wstrb,
-    input             in_wlast,
+    output        in_arready,
+    input         in_arvalid,
+    input  [ 3:0] in_arid,
+    input  [31:0] in_araddr,
+    input  [ 7:0] in_arlen,
+    input  [ 2:0] in_arsize,
+    input  [ 1:0] in_arburst,
+    input         in_rready,
+    output        in_rvalid,
+    output [ 3:0] in_rid,
+    output [31:0] in_rdata,
+    output [ 1:0] in_rresp,
+    output        in_rlast,
+    output        in_awready,
+    input         in_awvalid,
+    input  [ 3:0] in_awid,
+    input  [31:0] in_awaddr,
+    input  [ 7:0] in_awlen,
+    input  [ 2:0] in_awsize,
+    input  [ 1:0] in_awburst,
+    output        in_wready,
+    input         in_wvalid,
+    input  [31:0] in_wdata,
+    input  [ 3:0] in_wstrb,
+    input         in_wlast,
     in_bready,
-    output            in_bvalid,
-    output     [ 3:0] in_bid,
-    output     [ 1:0] in_bresp,
+    output        in_bvalid,
+    output [ 3:0] in_bid,
+    output [ 1:0] in_bresp,
 
     input         out_arready,
     output        out_arvalid,
@@ -63,74 +63,79 @@ module axi4_delayer (
     input  [ 1:0] out_bresp
 );
   reg read_last;
-  reg [31:0] rdata[1:0];
-  reg rvalid, bvalid;
-  reg read_begin, write_begin, write_end;
-  reg [7:0] arlen;
+  reg rready, rvalid, bvalid;
+  reg read_couter_enable, write_couter_enable;
+  reg read_valid, write_valid;
   integer read_counter, write_counter;
-  integer read_len, read_index;
-  integer read_counter_vec[1:0];
+
   always @(posedge clock) begin
     if (reset) begin
-      read_last   <= 0;
-      read_begin  <= 0;
-      write_begin <= 0;
-      write_end   <= 0;
-      read_counter = 0;
+      read_last <= 0;
+      rready <= 0;
+      rvalid <= 0;
+      bvalid <= 0;
+      read_valid <= 0;
+      write_valid <= 0;
+      read_couter_enable <= 0;
+      write_couter_enable <= 0;
+      read_counter  = 0;
       write_counter = 0;
-      read_len = 0;
-      read_index = 0;
     end else begin
-      if (rvalid) rvalid <= 0;
-      if (read_last) read_last <= 0;
+      if (in_rready & rvalid) begin
+        if (read_last) read_last <= 0;
+        else read_couter_enable <= 1;
+        rready <= 0;
+        rvalid <= 0;
+      end
 
       if (in_arvalid) begin
-        arlen <= in_arlen;
-        read_begin <= 1;
-        read_len = 0;
-        read_index = 0;
+        read_couter_enable <= 1;
         read_counter = read_counter + 940;  // 7.4 * 128(cpu clock 840MHZ)
-      end else if (read_begin) read_counter = read_counter + 940;
-      if (out_rvalid) begin
-        read_counter_vec[read_len] = read_counter >> 7;
-        rdata[read_len] = out_rdata;
-        read_counter = 0;
-        read_len = read_len + 1;
-        if (read_len[7:0] == arlen + 1) read_begin <= 0;
+      end else if (read_couter_enable) read_counter = read_counter + 940;
+
+      if (out_rvalid && read_couter_enable) begin
+        read_valid <= 1;
+        read_couter_enable <= 0;
+        read_counter = read_counter >> 7;
       end
-      if (read_index < read_len) begin
-        read_counter_vec[read_index] = read_counter_vec[read_index] - 1;
-        if (read_counter_vec[read_index] == 0) begin
-          in_rdata <= rdata[read_index];
-          rvalid   <= 1;
-          read_index = read_index + 1;
-          if (read_index == read_len) begin
+
+      if (read_valid) begin
+        read_counter = read_counter - 1;
+        if (read_counter == 0) begin
+          rready <= 1;
+          rvalid <= 1;
+          read_valid <= 0;
+          if (out_rlast) begin
             read_last <= 1;
           end
         end
       end
 
-      if (bvalid) bvalid <= 0;
+      if (in_bready & bvalid) begin
+        bvalid <= 0;
+      end
+
       if (in_awvalid) begin
-        write_begin <= 1;
+        write_couter_enable <= 1;
         write_counter = write_counter + 940;  // 7.4 * 128(cpu clock 840MHZ)
-      end else if (write_begin) write_counter = write_counter + 940;
+      end else if (write_couter_enable) write_counter = write_counter + 940;
 
-      if (out_bvalid) begin
+      if (out_bvalid & write_couter_enable) begin
+        write_couter_enable <= 0;
+        write_valid <= 1;
         write_counter = write_counter >> 7;
-        write_begin <= 0;
-        write_end   <= 1;
       end
 
-      if (write_end) begin
+      if (write_valid) begin
         write_counter = write_counter - 1;
         if (write_counter == 0) begin
           bvalid <= 1;
-          write_end <= 0;
+          write_valid <= 0;
         end
       end
     end
   end
+
   assign in_arready = out_arready;
   assign out_arvalid = in_arvalid;
   assign out_arid = in_arid;
@@ -138,10 +143,10 @@ module axi4_delayer (
   assign out_arlen = in_arlen;
   assign out_arsize = in_arsize;
   assign out_arburst = in_arburst;
-  assign out_rready = in_rready;
+  assign out_rready = in_rready & rready;
   assign in_rvalid = rvalid;
   assign in_rid = out_rid;
-  // assign in_rdata = out_rdata;
+  assign in_rdata = out_rdata;
   assign in_rresp = out_rresp;
   assign in_rlast = read_last;
   assign in_awready = out_awready;
-- 
2.34.1

