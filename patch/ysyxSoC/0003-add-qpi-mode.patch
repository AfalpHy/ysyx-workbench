From f21306a12e4ecdc62dfd440ffef1a62fed3bcac8 Mon Sep 17 00:00:00 2001
From: AfalpHy <736353503@qq.com>
Date: Wed, 12 Feb 2025 16:08:42 +0800
Subject: [PATCH 03/29] add qpi mode

---
 perip/psram/efabless/EF_PSRAM_CTRL.v    | 112 ++++++++++++++++++++++--
 perip/psram/efabless/EF_PSRAM_CTRL_wb.v |  33 +++++--
 perip/psram/psram.v                     |  26 +++---
 3 files changed, 149 insertions(+), 22 deletions(-)

diff --git a/perip/psram/efabless/EF_PSRAM_CTRL.v b/perip/psram/efabless/EF_PSRAM_CTRL.v
index b6e737e9..c6a05083 100644
--- a/perip/psram/efabless/EF_PSRAM_CTRL.v
+++ b/perip/psram/efabless/EF_PSRAM_CTRL.v
@@ -47,6 +47,7 @@ module PSRAM_READER (
     input   wire [23:0]     addr,
     input   wire            rd,
     input   wire [2:0]      size,
+    input   wire            qpi,
     output  wire            done,
     output  wire [31:0]     line,
 
@@ -60,7 +61,7 @@ module PSRAM_READER (
     localparam  IDLE = 1'b0,
                 READ = 1'b1;
 
-    wire [7:0]  FINAL_COUNT = 19 + size*2; // was 27: Always read 1 word
+    wire [7:0]  FINAL_COUNT = qpi ? 13 + size*2 : 19 + size*2; // was 27: Always read 1 word
 
     reg         state, nstate;
     reg [7:0]   counter;
@@ -115,11 +116,21 @@ module PSRAM_READER (
     // Sample with the negedge of sck
     wire[1:0] byte_index = {counter[7:1] - 8'd10}[1:0];
     always @ (posedge clk)
-        if(counter >= 20 && counter <= FINAL_COUNT)
+        if(counter >= (qpi ? 14 : 20) && counter <= FINAL_COUNT)
             if(sck)
                 data[byte_index] <= {data[byte_index][3:0], din}; // Optimize!
 
-    assign dout     =   (counter < 8)   ?   {3'b0, CMD_EBH[7 - counter]}:
+    assign dout     =   qpi ? ((counter == 0)? CMD_EBH[7:4]    :
+                        (counter == 1) ?   CMD_EBH[3:0]        :
+                        (counter == 2) ?   saddr[23:20]        :
+                        (counter == 3) ?   saddr[19:16]        :
+                        (counter == 4) ?   saddr[15:12]        :
+                        (counter == 5) ?   saddr[11:8]         :
+                        (counter == 6) ?   saddr[7:4]          :
+                        (counter == 7) ?   saddr[3:0]          :
+                        4'h0)
+                        :
+                        (counter < 8)   ?   {3'b0, CMD_EBH[7 - counter]}:
                         (counter == 8)  ?   saddr[23:20]        :
                         (counter == 9)  ?   saddr[19:16]        :
                         (counter == 10) ?   saddr[15:12]        :
@@ -128,7 +139,7 @@ module PSRAM_READER (
                         (counter == 13) ?   saddr[3:0]          :
                         4'h0;
 
-    assign douten   = (counter < 14);
+    assign douten   = (counter < (qpi ? 8 : 14));
 
     assign done     = (counter == FINAL_COUNT+1);
 
@@ -149,6 +160,7 @@ module PSRAM_WRITER (
     input   wire [31: 0]    line,
     input   wire [2:0]      size,
     input   wire            wr,
+    input   wire            qpi,
     output  wire            done,
 
     output  reg             sck,
@@ -161,7 +173,7 @@ module PSRAM_WRITER (
     localparam  IDLE = 1'b0,
                 WRITE = 1'b1;
 
-    wire[7:0]        FINAL_COUNT = 13 + size*2;
+    wire[7:0]        FINAL_COUNT = qpi ? 7 + size*2 : 13 + size*2;
 
     reg         state, nstate;
     reg [7:0]   counter;
@@ -212,7 +224,24 @@ module PSRAM_WRITER (
         else if((state == IDLE) && wr)
             saddr <= addr;
 
-    assign dout     =   (counter < 8)   ?   {3'b0, CMD_38H[7 - counter]}:
+    assign dout     =   qpi ? ((counter == 0) ? CMD_38H[7:4]    :
+                        (counter == 1)  ?   CMD_38H[3:0]        :
+                        (counter == 2)  ?   saddr[23:20]        :
+                        (counter == 3)  ?   saddr[19:16]        :
+                        (counter == 4) ?   saddr[15:12]         :
+                        (counter == 5) ?   saddr[11:8]          :
+                        (counter == 6) ?   saddr[7:4]           :
+                        (counter == 7) ?   saddr[3:0]           :
+                        (counter == 8) ?   line[7:4]            :
+                        (counter == 9) ?   line[3:0]            :
+                        (counter == 10) ?   line[15:12]         :
+                        (counter == 11) ?   line[11:8]          :
+                        (counter == 12) ?   line[23:20]         :
+                        (counter == 13) ?   line[19:16]         :
+                        (counter == 14) ?   line[31:28]         :
+                         line[27:24])                           
+                        :
+                        ((counter < 8)   ?   {3'b0, CMD_38H[7 - counter]}:
                         (counter == 8)  ?   saddr[23:20]        :
                         (counter == 9)  ?   saddr[19:16]        :
                         (counter == 10) ?   saddr[15:12]        :
@@ -226,7 +255,7 @@ module PSRAM_WRITER (
                         (counter == 18) ?   line[23:20]         :
                         (counter == 19) ?   line[19:16]         :
                         (counter == 20) ?   line[31:28]         :
-                        line[27:24];
+                        line[27:24]);
 
     assign douten   = (~ce_n);
 
@@ -234,3 +263,72 @@ module PSRAM_WRITER (
 
 
 endmodule
+
+// Using 88H Command
+module PSRAM_CHANGE (
+    input   wire            clk,
+    input   wire            rst_n,
+    input   wire            enable,
+    output  reg             done,
+
+    output  reg             sck,
+    output  reg             ce_n,
+    output  wire [3:0]      dout,
+    output  wire            douten
+);
+    //localparam  DATA_START = 14;
+    localparam  IDLE = 1'b0,
+                WRITE = 1'b1;
+
+    wire[7:0]        FINAL_COUNT = 7;
+
+    reg         state, nstate;
+    reg [7:0]   counter;
+    reg [23:0]  saddr;
+    //reg [7:0]   data [3:0];
+
+    wire[7:0]   CMD_88H = 8'h88;
+
+    always @*
+        case (state)
+            IDLE: if(enable) nstate = WRITE; else nstate = IDLE;
+            WRITE: if(done) nstate = IDLE; else nstate = WRITE;
+        endcase
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n) state <= IDLE;
+        else state <= nstate;
+
+    // Drive the Serial Clock (sck) @ clk/2
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            sck <= 1'b0;
+        else if(~ce_n)
+            sck <= ~ sck;
+        else if(state == IDLE)
+            sck <= 1'b0;
+
+    // ce_n logic
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            ce_n <= 1'b1;
+        else if(state == WRITE)
+            ce_n <= 1'b0;
+        else
+            ce_n <= 1'b1;
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            counter <= 8'b0;
+        else if(sck & ~done)
+            counter <= counter + 1'b1;
+        else if(state == IDLE)
+            counter <= 8'b0;
+
+    assign dout     = {3'b0, CMD_88H[7 - counter]};
+   
+    assign douten   = (~ce_n);
+
+    assign done     = (counter == FINAL_COUNT + 1);
+
+endmodule
diff --git a/perip/psram/efabless/EF_PSRAM_CTRL_wb.v b/perip/psram/efabless/EF_PSRAM_CTRL_wb.v
index 7b5296db..237e172a 100644
--- a/perip/psram/efabless/EF_PSRAM_CTRL_wb.v
+++ b/perip/psram/efabless/EF_PSRAM_CTRL_wb.v
@@ -54,6 +54,11 @@ module EF_PSRAM_CTRL_wb (
     wire [3:0]  mw_dout;
     wire        mw_doe;
 
+    wire        ch_sck;
+    wire        ch_ce_n;
+    wire [3:0]  ch_dout;
+    wire [3:0]  ch_doe;
+ 
     // PSRAM Reader and Writer wires
     wire        mr_rd;
     wire        mr_done;
@@ -68,11 +73,15 @@ module EF_PSRAM_CTRL_wb (
     wire        wb_re           =   ~we_i & wb_valid;
     //wire[3:0]   wb_byte_sel     =   sel_i & {4{wb_we}};
 
+    reg qpi;
+    reg change2qpi;
     // The FSM
     reg         state, nstate;
     always @ (posedge clk_i or posedge rst_i)
-        if(rst_i)
+        if(rst_i) begin
             state <= ST_IDLE;
+            change2qpi <= 1;
+        end
         else
             state <= nstate;
 
@@ -137,6 +146,7 @@ module EF_PSRAM_CTRL_wb (
         .rd(mr_rd),
         //.size(size), Always read a word
         .size(3'd4),
+        .qpi(qpi),
         .done(mr_done),
         .line(dat_o),
         .sck(mr_sck),
@@ -152,6 +162,7 @@ module EF_PSRAM_CTRL_wb (
         .addr({adr_i[23:0]}),
         .wr(mw_wr),
         .size(size),
+        .qpi(qpi),
         .done(mw_done),
         .line(wdata),
         .sck(mw_sck),
@@ -161,10 +172,22 @@ module EF_PSRAM_CTRL_wb (
         .douten(mw_doe)
     );
 
-    assign sck  = wb_we ? mw_sck  : mr_sck;
-    assign ce_n = wb_we ? mw_ce_n : mr_ce_n;
-    assign dout = wb_we ? mw_dout : mr_dout;
-    assign douten  = wb_we ? {4{mw_doe}}  : {4{mr_doe}};
+    PSRAM_CHANGE change(
+        .clk(clk_i),
+        .rst_n(~rst_i),
+        .enable(change2qpi),
+        .done(qpi),
+
+        .sck(ch_sck),
+        .ce_n(ch_ce_n),
+        .dout(ch_dout),
+        .douten(ch_doe)
+    );
+
+    assign sck  = qpi ? (wb_we ? mw_sck  : mr_sck) : ch_sck;
+    assign ce_n = qpi ? (wb_we ? mw_ce_n : mr_ce_n) : ch_ce_n;
+    assign dout = qpi ? (wb_we ? mw_dout : mr_dout) : ch_dout;
+    assign douten  = qpi ? (wb_we ? {4{mw_doe}}  : {4{mr_doe}}) : ch_doe;
 
     assign mw_din = din;
     assign mr_din = din;
diff --git a/perip/psram/psram.v b/perip/psram/psram.v
index f2ec0124..8b57256e 100644
--- a/perip/psram/psram.v
+++ b/perip/psram/psram.v
@@ -29,6 +29,9 @@ module psram (
 
   reg wen;
 
+  reg qpi_mode = 0;
+  reg [7:0] cmd_cnt = 8;
+
   assign dio = (~wen & state == DATA) ? data[7:4] : 4'bz;
 
   always @(state) begin
@@ -44,18 +47,21 @@ module psram (
     if (ce_n) state <= CMD;
     else begin
       case (state)
-        CMD: state <= (cnt == 8'd7) ? ADDR : state;
-        ADDR: state <= (cnt == 8'd13) ? DATA : state;
+        CMD: state <= (cnt == cmd_cnt - 1) ? ADDR : state;
+        ADDR: state <= (cnt == cmd_cnt + 5) ? DATA : state;
         default: state <= state;
       endcase
     end
   end
 
   always @(posedge sck) begin
-    if (cnt == 8'd8) begin
+    if ((qpi_mode && cnt == 8'd2) || (~qpi_mode && cnt == 8'd8)) begin
       if (cmd == 8'hEB) wen <= 0;
       else if (cmd == 8'h38) wen <= 1;
-      else begin
+      else if (cmd == 8'h88) begin
+        qpi_mode <= 1;
+        cmd_cnt  <= 8;
+      end else begin
         $fwrite(32'h80000002, "Assertion failed: Unsupport command `%xh`", cmd);
         $fatal;
       end
@@ -64,14 +70,14 @@ module psram (
 
   always @(posedge sck) begin
     case (state)
-      CMD: cmd <= {cmd[6:0], dio[0]};
+      CMD: cmd <= qpi_mode ? {cmd[3:0], dio} : {cmd[6:0], dio[0]};
       ADDR: addr <= {addr[19:0], dio};
       DATA: begin
         if (wen) data <= {data[27:0], dio};
         else begin
-          if (cnt == 8'd14) begin
+          if (cnt == cmd_cnt + 6) begin
             data <= rdata;
-          end else if (cnt >= 21) begin
+          end else if (cnt >= cmd_cnt + 15) begin
             if (cnt[0]) begin
               data[7:4] <= data[3:0];
             end else data <= data >> 8;
@@ -84,11 +90,11 @@ module psram (
 
   always @(posedge ce_n) begin
     if (wen) begin
-      if (cnt == 16) begin
+      if (cnt == cmd_cnt + 8) begin
         psram_write({8'b0, addr}, {24'b0, data[7:0]}, 32'hff);
-      end else if (cnt == 18) begin
+      end else if (cnt == cmd_cnt + 10) begin
         psram_write({8'b0, addr}, {16'b0, data[7:0], data[15:8]}, 32'hffff);
-      end else if (cnt == 22 && wen) begin
+      end else if (cnt == cmd_cnt + 14) begin
         psram_write({8'b0, addr}, {data[7:0], data[15:8], data[23:16], data[31:24]}, 32'hffff_ffff);
       end
     end
-- 
2.34.1

