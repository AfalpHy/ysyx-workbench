ENTRY(_start)
PHDRS { entry PT_LOAD; ssbl PT_LOAD; text PT_LOAD;  data PT_LOAD; bss PT_LOAD; }
MEMORY {
  flash : ORIGIN = 0x30000000, LENGTH = 16M
  sram : ORIGIN = 0x0f000000, LENGTH = 8K
  sdram : ORIGIN = 0xa0000000, LENGTH = 64M
}

SECTIONS {
  . = ORIGIN(flash);
  _sram_start = ORIGIN(sram);
  _sdram_start = ORIGIN(sdram);

  .entry : {
    *(entry)
  } > flash : entry

  .ssbl : {
    *(SSBL)
  } > sram AT > flash : ssbl
  _SSBL_start = LOADADDR(.ssbl);
  _SSBL_size = SIZEOF(.ssbl);
  
  .text : {
    *(.text*)
  } > sdram AT > flash : text
  _text_start = LOADADDR(.text);

  .rodata : {
    *(.rodata*)
    *(.srodata*)
  } > sdram AT > flash : data

  .data : {
    *(.data*)
    *(.sdata*)
  } > sdram AT > flash 

  .bss : {
    *(.bss*)
    *(.sbss*)
    *(.scommon)
  } > sdram AT > flash : bss
  _total_size = LOADADDR(.bss) - _text_start;
  _heap_start = .;

  _stack_pointer = ORIGIN(sram) + LENGTH(sram);
}
